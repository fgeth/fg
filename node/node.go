package node
import (
	//"hash"
	"crypto/ecdsa"
	"unsafe"
	"reflect"
	"github.com/dchest/siphash"
	"github.com/fgeth/fg/chain"
	"github.com/fgeth/fg/crypto"
)

const (
	// intSizeBytes is the size in byte of an int or uint value.
	//intSizeBytes = strconv.IntSize >> 3

	// generated by splitting the md5 sum of "hashmap"
	sipHashKey1 = 0xdda7806a4847ec61
	sipHashKey2 = 0xb5940c2623a5aabd
)

type Node struct {
	Id				uintptr
	Ip				string
	Ips				string
	Port			string
	Url				string
	PubKey			PublicKey
	Ids				[]unitptr				//Array used to get Nodes New Nodes are appended to Array Once added Nodes are never removed
	Nodes			map[unitptr]Node		//Map index is the Node ID the unitptr hash of the Nodes IP
	Chain			map[uint]Chain			//Map index is Chainid i.e. the year the chain was created
	
}


func hashKey(s string) uintptr {
	sh := (*reflect.StringHeader)(unsafe.Pointer(&s))
	bh := reflect.SliceHeader{
		Data: sh.Data,
		Len:  sh.Len,
		Cap:  sh.Len,
	}
	buf := *(*[]byte)(unsafe.Pointer(&bh))
	return uintptr(siphash.Hash(sipHashKey1, sipHashKey2, buf))
}